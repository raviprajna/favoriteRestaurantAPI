package com.ravi.labs.restaurant.service.customer;

import com.ravi.labs.restaurant.dao.CustomerRepository;
import com.ravi.labs.restaurant.entity.customer.CustomerEntity;
import com.ravi.labs.restaurant.service.restaurant.RestaurantService;
import com.ravi.labs.restaurant.dto.CustomerDTO;
import com.ravi.labs.restaurant.exception.ConstraintsViolationException;
import com.ravi.labs.restaurant.exception.EntityNotFoundException;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import java.util.List;

/**
 * Service to encapsulate the link between DAO and controller and to have business logic for some customer specific things.
 * <p/>
 */

@Slf4j
@Service
public class CustomerServiceImpl implements CustomerService {

    @Autowired
    RestaurantService restaurantService;

    @PersistenceContext
    private EntityManager entityManager;

    private final CustomerRepository customerRepository;

    public CustomerServiceImpl(final CustomerRepository customerRepository) {
        this.customerRepository = customerRepository;
    }


    /**
     * Selects a customer by id.
     *
     * @param customerId
     * @return found customer
     * @throws EntityNotFoundException if no customer with the given id was found.
     */
    @Override
    public CustomerEntity find(Long customerId) throws EntityNotFoundException {
        return findCustomerChecked(customerId);
    }


    /**
     * Creates a new customer.
     *
     * @param customerDO
     * @return
     * @throws ConstraintsViolationException if a customer already exists with the given username, ... .
     */
    @Override
    public CustomerEntity create(CustomerEntity customerDO) throws ConstraintsViolationException {
        CustomerEntity customer;

        try {
            customer = customerRepository.save(customerDO);
        } catch (DataIntegrityViolationException e) {
            log.warn("ConstraintsViolationException while creating a customer: {}", customerDO, e);
            throw new ConstraintsViolationException(e.getMessage());
        }
        return customer;
    }


    /**
     * Deletes an existing customer by id.
     *
     * @param customerId
     * @throws EntityNotFoundException if no customer with the given id was found.
     */
    @Override
    @Transactional
    public void delete(Long customerId) throws EntityNotFoundException {
        CustomerEntity customerDO = findCustomerChecked(customerId);
        customerDO.setDeleted(true);
    }

    @Override
    public List<CustomerEntity> find(CustomerDTO customerDTO) {
        return null;
    }


    /**
     * Find all customers by using spring data QueryByExample
     *
     * @param
     */
/*
    @Override
    public List<CustomerEntity> find(CustomerDTO customerDTO) {

    */
/*
    TODO 1 : Fix QBE FIlter, QBE may not work for nested DO,
    TODO 2 : Try using filter pattern instead of ugly nested if block

        // 1. Map DTO to DO
        CustomerEntity customerDO = CustomerMapper.makeCustomerDO(customerDTO);

        //2. Build QBE field
        ExampleMatcher exampleMatcher = ExampleMatcher.matching()
                .withIgnorePaths("dateCreate", "deleted",
                        "dateCoordinateUpdated", "coordinate",
                        "onlineStatus", "restaurant" );
        Example<CustomerEntity> customerExample = Example.of(customerDO, exampleMatcher);

        //3. Query with QBE
        List<CustomerEntity> filteredCustomerList = customerRepository.findAll(customerExample);


        return filteredCustomerList;
    *//*

        // 1. Initialize customerDO with QModel generated by QueryDSL
        QCustomerDO customerDO = QCustomerDO.customerDO;

        BooleanBuilder builder = new BooleanBuilder();

        JPAQuery customerQuery = new JPAQueryFactory(entityManager).from(customerDO);

        // 2. Build query criteria

        if (!StringUtils.isEmpty(customerDTO.getId()))
            builder.and(customerDO.id.eq(customerDTO.getId()));

        if (!StringUtils.isEmpty(customerDTO.getUsername()))
            builder.and(customerDO.username.eq(customerDTO.getUsername()));

        if (!StringUtils.isEmpty(customerDTO.getPassword()))
            builder.and(customerDO.password.eq(customerDTO.getPassword()));

        if (!StringUtils.isEmpty(customerDTO.isDeleted()))
            builder.and(customerDO.deleted.eq(customerDTO.isDeleted()));

        if (!StringUtils.isEmpty(customerDTO.getOnlineStatus()))
            builder.and(customerDO.onlineStatus.eq(customerDTO.getOnlineStatus()));

        if (!StringUtils.isEmpty(customerDTO.getCoordinate()))
            builder.and(customerDO.coordinate.eq(customerDTO.getCoordinate()));

        if (!StringUtils.isEmpty(customerDTO.getRestaurant())) {

            if (!StringUtils.isEmpty(customerDTO.getRestaurant().getId()))
                builder.and(customerDO.restaurant.id.eq(customerDTO.getRestaurant().getId()));

            if (!StringUtils.isEmpty(customerDTO.getRestaurant().getName()))
                builder.and(customerDO.restaurant.name.eq(customerDTO.getRestaurant().getName()));

            if (!StringUtils.isEmpty(customerDTO.getRestaurant().getFoodType()))
                builder.and(customerDO.restaurant.engineType.stringValue().eq(customerDTO.getRestaurant().getFoodType().name()));

            if (!StringUtils.isEmpty(customerDTO.getRestaurant().getLicensePlate()))
                builder.and(customerDO.restaurant.licensePlate.eq(customerDTO.getRestaurant().getLicensePlate()));

            if (!StringUtils.isEmpty(customerDTO.getRestaurant().getConvertible()))
                builder.and(customerDO.restaurant.convertible.eq(customerDTO.getRestaurant().getConvertible()));

            if (!StringUtils.isEmpty(customerDTO.getRestaurant().getLicensePlate()))
                builder.and(customerDO.restaurant.licensePlate.eq(customerDTO.getRestaurant().getLicensePlate()));

            if (!StringUtils.isEmpty(customerDTO.getRestaurant().getNoOfAirBag()))
                builder.and(customerDO.restaurant.noOfAirBag.eq(customerDTO.getRestaurant().getNoOfAirBag()));

            if (!StringUtils.isEmpty(customerDTO.getRestaurant().getRating()))
                builder.and(customerDO.restaurant.rating.eq(customerDTO.getRestaurant().getRating()));

            if (!StringUtils.isEmpty(customerDTO.getRestaurant().getSeatCount()))
                builder.and(customerDO.restaurant.seatCount.eq(customerDTO.getRestaurant().getSeatCount()));


            if (!StringUtils.isEmpty(customerDTO.getRestaurant().getManufacturerDO())) {

                if (!StringUtils.isEmpty(customerDTO.getRestaurant().getManufacturerDO().getBrandName()))
                    builder.and(customerDO.restaurant.manufacturer.brandName.eq(customerDTO.getRestaurant().getManufacturerDO().getBrandName()));

                if (!StringUtils.isEmpty(customerDTO.getRestaurant().getManufacturerDO().getModelName()))
                    builder.and(customerDO.restaurant.manufacturer.modelName.eq(customerDTO.getRestaurant().getManufacturerDO().getModelName()));


            }

        }

        customerQuery.where(builder);

        return customerQuery.fetch();
    }
*/

    private CustomerEntity findCustomerChecked(Long customerId) throws EntityNotFoundException {
        return customerRepository.findByIdAndDeleted(customerId, false)
                .orElseThrow(() -> new EntityNotFoundException("Could not find Customer with id: " + customerId));
    }

}
